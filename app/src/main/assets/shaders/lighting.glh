uniform vec3 C_eyePosition;
uniform float specularIntensity;
uniform float specularPower;

struct BaseLight
{
	vec3 color;
	float intensity;
};

struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};

struct PointLight
{
	BaseLight base;
	Attenuation attenuation;
	vec3 position;
	float range;
};

struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

vec4 calculateLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPosition)
{
	float diffuseFactor = dot(normal, -direction);
	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	if (diffuseFactor > 0.0) {
		diffuseColor = vec4(base.color, 1) * base.intensity * diffuseFactor;

		vec3 directionToEye = normalize(C_eyePosition - worldPosition);
		//vec3 reflectDirection = normalize(reflect(direction, normal));
		vec3 halfDirection = normalize(directionToEye - direction);

		float specularFactor = dot(halfDirection, normal);
		//float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularPower);

		if (specularFactor > 0.0) {
			specularColor = vec4(base.color, 1) * specularIntensity * specularFactor;
		}
	}

	return diffuseColor + specularColor;
}

vec4 calculatePointLight(PointLight pointLight, vec3 normal, vec3 worldPosition)
{
	vec3 direction = worldPosition - pointLight.position;
	float distance = length(direction);

	if (distance > pointLight.range)
		return vec4(0, 0, 0, 0);

	direction = normalize(direction);

	vec4 color = calculateLight(pointLight.base, direction, normal, worldPosition);

	float attenuation =
			pointLight.attenuation.constant +
			pointLight.attenuation.linear * distance +
			pointLight.attenuation.exponent * distance * distance +
			0.0001;

	return color / attenuation;
}

vec4 calculateSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPosition)
{
	vec3 direction = normalize(worldPosition - spotLight.pointLight.position);
	float spotFactor = dot(direction, spotLight.direction);

	vec4 color = vec4(0, 0, 0, 0);

	if (spotFactor > spotLight.cutoff) {
		color = calculatePointLight(spotLight.pointLight, normal, worldPosition) *
				(1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
	}

	return color;
}

vec4 calculateDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPosition)
{
	return calculateLight(directionalLight.base, -directionalLight.direction, normal, worldPosition);
}
